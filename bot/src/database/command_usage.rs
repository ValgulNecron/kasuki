//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "command_usage")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub command: String,
	#[sea_orm(primary_key, auto_increment = false)]
	pub user: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::command_list::Entity",
		from = "(Column::Command, Column::Command)",
		to = "(super::command_list::Column::CommandName, super::command_list::Column::CommandName)",
		on_update = "Cascade",
		on_delete = "Cascade"
	)]
	CommandList,
	#[sea_orm(
		belongs_to = "super::user_data::Entity",
		from = "Column::User",
		to = "super::user_data::Column::UserId",
		on_update = "Cascade",
		on_delete = "Cascade"
	)]
	UserData,
}

impl Related<super::command_list::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::CommandList.def()
	}
}

impl Related<super::user_data::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::UserData.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
