//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "guild_data")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub guild_id: String,
	pub guild_name: String,
	pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::activity_data::Entity")]
	ActivityData,
	#[sea_orm(has_one = "super::guild_lang::Entity")]
	GuildLang,
	#[sea_orm(has_one = "super::module_activation::Entity")]
	ModuleActivation,
	#[sea_orm(has_many = "super::server_image::Entity")]
	ServerImage,
}

impl Related<super::activity_data::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ActivityData.def()
	}
}

impl Related<super::guild_lang::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::GuildLang.def()
	}
}

impl Related<super::module_activation::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ModuleActivation.def()
	}
}

impl Related<super::server_image::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ServerImage.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
